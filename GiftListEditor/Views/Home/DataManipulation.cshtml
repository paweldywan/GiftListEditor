
@{
    ViewBag.Title = Resources.Global.DataManipulation_Menu;
}

<div class="codeRunner">
    <h3>@Resources.Home.DataManipulation.Tasks</h3>

    <form data-bind="submit: addTask">
        @Resources.Home.DataManipulation.AddTask: <input data-bind="value: newTaskText" placeholder="@Resources.Home.DataManipulation.WhatNeeds" />
        <button type="submit">@Resources.Common.Add</button>
    </form>

    <ul data-bind="foreach: tasks, visible: tasks().length > 0">
        <li>
            <input type="checkbox" data-bind="checked: isDone" />
            <input data-bind="value: title, disable: isDone" />
            <a href="#" data-bind="click: $parent.removeTask">@Resources.Common.Delete</a>
        </li>
    </ul>

    @Resources.Home.DataManipulation.TasksStatus <b data-bind="text: incompleteTasks().length">&nbsp;</b> @Resources.Home.DataManipulation.TasksToDo
    <span data-bind="visible: incompleteTasks().length == 0"> - @Resources.Home.DataManipulation.BeerTime</span>

    <form method="post">
        <input type="hidden" name="tasks" data-bind="value: ko.toJSON(tasks)" />
        <button type="submit">@Resources.Common.Save</button>
    </form>
</div>

@section Scripts{
    <script>
        function Task(data) {
            this.title = ko.observable(data.title);
            this.isDone = ko.observable(data.isDone);
        }

        function TaskListViewModel() {
            // Data
            var self = this;
            self.tasks = ko.observableArray([]);
            self.newTaskText = ko.observable();
            self.incompleteTasks = ko.computed(function () {
                return ko.utils.arrayFilter(self.tasks(), function (task) { return !task.isDone() });
            });

            // Operations
            self.addTask = function () {
                self.tasks.push(new Task({ title: this.newTaskText() }));
                self.newTaskText("");
            };
            self.removeTask = function (task) { self.tasks.remove(task) };

            // Load initial state from server, convert it to Task instances, then populate self.tasks
            $.getJSON("/api/tasks", function (allData) {
                var mappedTasks = $.map(allData.tasks, function (item) { return new Task(item) });
                self.tasks(mappedTasks);
            });
        }

        ko.applyBindings(new TaskListViewModel());
    </script>
}



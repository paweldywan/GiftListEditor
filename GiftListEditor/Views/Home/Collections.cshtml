
@{
    ViewBag.Title = Resources.Global.Collections_Menu;
}

<h2>@Resources.Home.Collections.ReservationStatus (<span data-bind="text: seats().length"></span>)</h2>

<table class="table">
    <thead>
        <tr>
            <th>@Resources.Home.Collections.PassengerName</th>
            <th>@Resources.Home.Collections.Meal</th>
            <th>@Resources.Home.Collections.Surcharge</th>
            <th></th>
        </tr>
    </thead>
    <tbody data-bind="foreach: seats">
        <tr>
            <td><input data-bind="value: name" /></td>
            <td><select data-bind="options: $root.availableMeals, value: meal, optionsText: 'mealName'"></select></td>
            <td data-bind="text: formattedPrice"></td>
            <td><a href="#" data-bind="click: $root.removeSeat">@Resources.Home.Collections.Remove</a></td>
        </tr>
    </tbody>
</table>

<button data-bind="click: addSeat, enable: seats().length < 5">@Resources.Home.Collections.ReserveAnother</button>

<h3 data-bind="visible: totalSurcharge() > 0">
    @Resources.Home.Collections.Total: $<span data-bind="text: totalSurcharge().toFixed(2)"></span>
</h3>

@section Scripts{
    <script>
        // Class to represent a row in the seat reservations grid
        function SeatReservation(name, initialMeal) {
            var self = this;
            self.name = name;
            self.meal = ko.observable(initialMeal);

            self.formattedPrice = ko.computed(function () {
                var price = self.meal().price;
                return price ? "$" + price.toFixed(2) : "@Resources.Home.Collections.None";
            });
        }

        // Overall viewmodel for this screen, along with initial state
        function ReservationsViewModel() {
            var self = this;

            // Non-editable catalog data - would come from the server
            self.availableMeals = [
                { mealName: "Standard (sandwich)", price: 0 },
                { mealName: "Premium (lobster)", price: 34.95 },
                { mealName: "Ultimate (whole zebra)", price: 290 }
            ];

            // Editable data
            self.seats = ko.observableArray([
                new SeatReservation("Steve", self.availableMeals[0]),
                new SeatReservation("Bert", self.availableMeals[0])
            ]);

            // Computed data
            self.totalSurcharge = ko.computed(function () {
                var total = 0;
                for (var i = 0; i < self.seats().length; i++)
                    total += self.seats()[i].meal().price;
                return total;
            });

            // Operations
            self.addSeat = function () {
                self.seats.push(new SeatReservation("", self.availableMeals[0]));
            }
            self.removeSeat = function (seat) { self.seats.remove(seat) }
        }

        ko.applyBindings(new ReservationsViewModel());
    </script>
}


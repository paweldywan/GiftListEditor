
@{
    ViewBag.Title = Resources.Global.SPA_Menu;
}

<!-- Folders -->
<ul class="folders" data-bind="foreach: folders">
    <li data-bind="text: value,
                   css: { selected: key == $root.chosenFolderId() },
                   click: $root.goToFolder"></li>
</ul>

<!-- Mails grid -->
<table class="mails" data-bind="with: chosenFolderData">
    <thead><tr><th>@Resources.Models.Mail.From</th><th>@Resources.Models.Mail.To</th><th>@Resources.Models.Mail.Subject</th><th>@Resources.Models.Mail.Date</th></tr></thead>
    <tbody data-bind="foreach: mails">
        <tr data-bind="click: $root.goToMail">
            <td data-bind="text: from"></td>
            <td data-bind="text: to"></td>
            <td data-bind="text: subject"></td>
            <td data-bind="text: date"></td>
        </tr>
    </tbody>
</table>

<!-- Chosen mail -->
<div class="viewMail" data-bind="with: chosenMailData">
    <div class="mailInfo">
        <h1 data-bind="text: subject"></h1>
        <p><label>@Resources.Models.Mail.From</label>: <span data-bind="text: from"></span></p>
        <p><label>@Resources.Models.Mail.To</label>: <span data-bind="text: to"></span></p>
        <p><label>@Resources.Models.Mail.Date</label>: <span data-bind="text: date"></span></p>
    </div>
    <p class="message" data-bind="html: messageContent" />
</div>

<br />

<button id="generateCSV" class="btn btn-default" data-bind="click: exportToCSV, enable: mailsExist">@Resources.Home.SPA.GenerateCSV</button>

@section Scripts{
    <script>
        function WebmailViewModel() {
            // Data
            let self = this;
            self.folders = [new KeyValuePair('Inbox', '@Resources.Home.SPA.Inbox'),
                            new KeyValuePair('Archive', '@Resources.Home.SPA.Archive'),
                            new KeyValuePair('Sent', '@Resources.Home.SPA.Sent'),
                            new KeyValuePair('Spam', '@Resources.Home.SPA.Spam')];

            self.chosenFolderId = ko.observable();
            self.chosenFolderData = ko.observable();
            self.chosenMailData = ko.observable();

            // Behaviours
            self.goToFolder = function (folder) { location.hash = folder.key };
            self.goToMail = function (mail) { location.hash = self.folders[mail.folder - 1].key + '/' + mail.id };
            self.exportToCSV = function () {
                let mails = objectsToRows(self.chosenFolderData().mails);               
                exportToCsv('mails.csv', mails);
            }

            let firstFolder = self.folders[0].key;

            self.mailsExist = ko.pureComputed(() => self.chosenFolderData()?.mails.length > 0 ?? false);

            GoToFolder(firstFolder);

            // Client-side routes
            Sammy(function () {
                this.get('#:folder', function () {
                    let folder = this.params.folder;

                    if (!self.folders.some(f => f.key == folder)) {
                        GoToFolder(firstFolder);
                        return;
                    }

                    self.chosenFolderId(folder);
                    self.chosenMailData(null);

                    $.get("/api/mail", { folder: folder },
                    function (data) {
                        fromISODateToLocaleStringConverter(data.mails)
                        self.chosenFolderData(data)
                    });
                });

                this.get('#:folder/:mailId', function () {

                    self.chosenFolderId(this.params.folder);
                    self.chosenFolderData(null);

                    $.get("/api/mail", { mailId: this.params.mailId },
                    function (data) {
                        fromISODateToLocaleStringConverter(data)
                        self.chosenMailData(data)
                    });
                });

                //this.get('', function () { this.app.runRoute('get', '#Inbox') });
            }).run();
        };

        ko.applyBindings(new WebmailViewModel(), document.body);
    </script>
}

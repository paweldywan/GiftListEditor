
@{
    ViewBag.Title = Resources.Global.Computed_Menu;
}

<div class="page">
    <div class="header" data-bind="with: metadata">
        <h1 data-bind="text: pageTitle">
        </h1>
        <div data-bind="with:personal">
            <a href="@Url.Action("Index")">Index</a> <a data-bind="attr: {href: link, title: text}, text: text"
                                                 class="personalCss"></a>
        </div>
    </div>
    <div id="main">
        <div class="showroom">
            <div>
                <div>
                    <img data-bind="attr: {src: product().photoUrl, title:product().shortDescription}" class="photoThumbnail" />
                </div>
                <div>
                    <span class="caption">Product:</span>
                    <span data-bind="text: product().shortDescription"></span>
                </div>
                <div>
                    <span class="caption">Unit Price:</span>
                    <input data-bind="value: product().salePrice, valueUpdate:'afterkeydown'" class="currencyInput" />
                </div>
                <div>
                    <span class="caption">Quantity:</span>
                    <input data-bind="value: quantity, valueUpdate: 'afterkeydown'" class="integerInput" />
                </div>
                <div>
                    <span class="caption">Ext. price:</span>
                    <span data-bind="text: extendedPrice"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="topics">
        <span>Explores:</span>
        <ul>
            <li>observable</li>
            <li>computed (for the photo Url)</li>
            <li>computed (for the extended price)</li>
            <li>click</li>
            <li>attr</li>
            <li>text</li>
            <li>value</li>
            <li>valueUpdate: 'afterkeydown'</li>
        </ul>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        $(function () {
            var photoPath = "/Images/";

            // function helper
            my.formatCurrency = function(value) {
                return "$" + value.toFixed(2);
            };

            // for creating Product Models
            my.Product = function () {
                this.id = ko.observable();
                this.salePrice = ko.observable();
                this.photo = ko.observable();
                this.shortDescription = ko.observable();
                // photo url
                this.photoUrl = ko.pureComputed(function () {
                    return photoPath + this.photo(); 
                }, this);
            };

            // NOTE: I am showing 2 ways to handle "this" with a computed observable.
            // 1st way is to pass in what "this should" represent.
            // 2nd way is to skip it, and use a variable that is scoped
            // outside of the computed function.

            // The ViewModel
            my.vm = {
                metadata: {
                    pageTitle: "Knockout: Computed",
                    personal: {
                        link: "http://twitter.com/john_papa",
                        text: "@@john_papa"
                    }
                },
                product: ko.observable(
                    new my.Product()
                        .shortDescription("Taylor Koa Series K66ce")
                        .salePrice(4199)
                        .photo("Taylor Koa Series K66ce Grand Symphony 12-String Cutaway Acoustic Electric Guitar.png")
                    ),
                quantity: ko.observable(2)
            };

            //extended price
            my.vm.extendedPrice = ko.computed(function () {
                return this.product() ? this.product().salePrice() * parseInt("0" + this.quantity(), 10) : 0;
            }, my.vm);

            ko.applyBindings(my.vm);
        });
    </script>
}

